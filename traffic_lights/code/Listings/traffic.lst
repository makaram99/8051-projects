C51 COMPILER V9.60.0.0   TRAFFIC                                                           04/05/2022 01:44:54 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TRAFFIC
OBJECT MODULE PLACED IN .\Objects\traffic.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\traffic.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include) DEBUG OBJECTEXT
                    -END PRINT(.\Listings\traffic.lst) OBJECT(.\Objects\traffic.obj)

line level    source

   1          /***************************************************************************
   2           * @file    traffic.c
   3           * @author  Mahmoud Karam (ma.karam272@gmail.com)
   4           * @brief   A simple traffic Light system.
   5           * @details It uses the cuteOS library to create tasks and schedule them.
   6           *          It uses TRAFFIC_Update() function to update the traffic light
   7           *          system. See \ref traffic.h for the implementation and sequence
   8           *          of the system.
   9           *
  10           * @version 1.0.0
  11           * @date    2022-03-22
  12           * @copyright Copyright (c) 2022
  13           ***************************************************************************/
  14          #include <reg52.h>
  15          #include "STD_TYPES.h"
  16          #include "Main.h"
  17          #include "Port.h"
  18          #include "traffic.h"
  19          #include "traffic_cfg.h"
  20          
  21          /*--------------------------------------------------------------------*/
  22          /*                          PRIVATE DATA                              */
  23          /*--------------------------------------------------------------------*/
  24          static TRAFFIC_SEQUENCE_t   colorSequence       = RED;  /*!< Initial colorSequence */
  25          static u16                  timeInState = 0;    /*!< Time counter */
  26          
  27          
  28          /*--------------------------------------------------------------------*/
  29          /*                    PRIVATE FUNCTIONS PROTOTYPES                    */
  30          /*--------------------------------------------------------------------*/
  31          static ERROR_t TRAFFIC_RedSequence(void);
  32          static ERROR_t TRAFFIC_RedAmberSequence(void);
  33          static ERROR_t TRAFFIC_GreenSequence(void);
  34          static ERROR_t TRAFFIC_AmberSequence(void);
  35          
  36          static ERROR_t TRAFFIC_GenericSequence(const STATE_t red, const STATE_t amber, const STATE_t green, TRAFFI
             -C_SEQUENCE_DURATION_t duration);
  37          
  38          
  39          
  40          
  41          
  42          
  43          
  44          /*--------------------------------------------------------------------*/
  45          /*                          PUBLIC FUNCTIONS                          */
  46          /*--------------------------------------------------------------------*/
  47          ERROR_t TRAFFIC_Init(void) {
  48   1          ERROR_t error = ERROR_NO;
  49   1      
  50   1          /*!< Reset the time counter */
  51   1          timeInState = 0;
  52   1      
  53   1          /*!< Initialize the colorSequence */
C51 COMPILER V9.60.0.0   TRAFFIC                                                           04/05/2022 01:44:54 PAGE 2   

  54   1          colorSequence = RED;
  55   1          redPin   = HIGH;
  56   1          amberPin = LOW;
  57   1          greenPin = LOW;
  58   1      
  59   1          return error;
  60   1      }
  61          
  62          /***************************************************************************
  63           * @details This function does the following:
  64           *          * Turning off all the traffic lights.
  65           *          * Assign the callback function of the OS delay to NULL.
  66           ***************************************************************************/
  67          ERROR_t TRAFFIC_DeInit(void) {
  68   1          ERROR_t error = ERROR_NO;
  69   1      
  70   1          /*!< Setting traffic light to red */
  71   1          redPin   = LOW;
  72   1          amberPin = LOW;
  73   1          greenPin = LOW;
  74   1          
  75   1          /*!< Setting callback function to NULL */
  76   1          //cuteOS_(NULL);
  77   1      
  78   1          return error;
  79   1      }
  80          
  81          /***************************************************************************
  82           * @details This function does the following:
  83           *          - Setting the traffic light color sequence according to the current 
  84           *            color sequence.
  85           *          - Update the OS delay for the current color sequence. 
  86           *          - Update the color sequence value to the next color sequence.
  87           *          So, when calling this function again, the color sequence will be changed.
  88           ***************************************************************************/
  89          ERROR_t TRAFFIC_Update(void) {
  90   1          ERROR_t error = ERROR_NO;
  91   1      
  92   1          /*!< Switch on the current color sequence */
  93   1          switch(colorSequence) {
  94   2              case RED:;
  95   2                  error |= TRAFFIC_RedSequence();
  96   2                  break;
  97   2              case RED_AMBER:;
  98   2                  error |= TRAFFIC_RedAmberSequence();
  99   2                  break;
 100   2              case GREEN:;
 101   2                  error |= TRAFFIC_GreenSequence();
 102   2                  break;
 103   2              case AMBER:;
 104   2                  error |= TRAFFIC_AmberSequence();
 105   2                  break;
 106   2              default:;
 107   2                  error |= ERROR_ILLEGAL_PARAM;   /*!< Illegal color sequence */
 108   2                  break;
 109   2          }
 110   1      
 111   1          return error;
 112   1      }
 113          
 114          
 115          ERROR_t TRAFFIC_SetColor(const TRAFFIC_SEQUENCE_t Copy_color) {
C51 COMPILER V9.60.0.0   TRAFFIC                                                           04/05/2022 01:44:54 PAGE 3   

 116   1          ERROR_t error = ERROR_NO;
 117   1          colorSequence = Copy_color;
 118   1      
 119   1          error |= TRAFFIC_Update();
 120   1      
 121   1          return error;
 122   1      }
 123          
 124          ERROR_t TRAFFIC_GetColor(TRAFFIC_SEQUENCE_t * const Copy_color) {
 125   1          ERROR_t error = ERROR_NO;
 126   1      
 127   1          *Copy_color = colorSequence;
 128   1      
 129   1          return error;
 130   1      }
 131          
 132          
 133          
 134          
 135          
 136          
 137          /*--------------------------------------------------------------------*/
 138          /*                 PRIVATE FUNCTIONS DEFINITIONS                      */
 139          /*--------------------------------------------------------------------*/
 140          /**********************************************************************
 141           * @brief   Set the color of the traffic light to RED.
 142           * @note    This function will be called by the function TRAFFIC_Update().
 143           * @return  ERROR_t: Error status. Check the options in the global enum \ref ERROR_t.
 144           **********************************************************************/
 145          static ERROR_t TRAFFIC_RedSequence(void) {
 146   1          ERROR_t error = ERROR_NO;
 147   1          
 148   1          error |= TRAFFIC_GenericSequence(HIGH, LOW, LOW, TRAFFIC_Configs.red_duration);
 149   1      
 150   1          return error;
 151   1      }
 152          
 153          /**********************************************************************
 154           * @brief   Set the color of the traffic light to RED_AMBER.
 155           * @note    This function will be called by the function TRAFFIC_Update().
 156           * @return  ERROR_t: Error status. Check the options in the global enum \ref ERROR_t.
 157           **********************************************************************/
 158          static ERROR_t TRAFFIC_RedAmberSequence(void) {
 159   1          ERROR_t error = ERROR_NO;
 160   1          
 161   1          error |= TRAFFIC_GenericSequence(HIGH, HIGH, LOW, TRAFFIC_Configs.red_amber_duration);
 162   1      
 163   1          return error;
 164   1      }
 165          
 166          /**********************************************************************
 167           * @brief   Set the color of the traffic light to GREEN.
 168           * @note    This function will be called by the function TRAFFIC_Update().
 169           * @return  ERROR_t: Error status. Check the options in the global enum \ref ERROR_t.
 170           **********************************************************************/
 171          static ERROR_t TRAFFIC_GreenSequence(void) {
 172   1          ERROR_t error = ERROR_NO;
 173   1          
 174   1          error |= TRAFFIC_GenericSequence(LOW, LOW, HIGH, TRAFFIC_Configs.green_duration);
 175   1      
 176   1          return error;
 177   1      }
C51 COMPILER V9.60.0.0   TRAFFIC                                                           04/05/2022 01:44:54 PAGE 4   

 178          
 179          /**********************************************************************
 180           * @brief   Set the color of the traffic light to AMBER.
 181           * @note    This function will be called by the function TRAFFIC_Update().
 182           * @return  ERROR_t: Error status. Check the options in the global enum \ref ERROR_t.
 183           **********************************************************************/
 184          static ERROR_t TRAFFIC_AmberSequence(void) {
 185   1          ERROR_t error = ERROR_NO;
 186   1          
 187   1          error |= TRAFFIC_GenericSequence(LOW, HIGH, LOW, TRAFFIC_Configs.amber_duration);
 188   1      
 189   1          return error;
 190   1      }
 191          
 192          /**********************************************************************
 193           * @brief   A generic function to set the color of the traffic light.
 194           * @details This function will set the color of the traffic light according to:
 195           *          - The passed states of each lamp.
 196           *          - Update the time counter.
 197           *          - Update the colorSequence according to the time counter
 198           *            for the current sequence has been completed, and reset the 
 199           *            time counter.
 200           * @param[in] redState: The state of the red lamp.
 201           * @param[in] amberState: The state of the amber lamp.
 202           * @param[in] greenState: The state of the green lamp.
 203           * @note The states of the lamps are either \ref HIGH or \ref LOW, member 
 204           *       of the global enum \ref STATE_t.
 205           * @param[in] duration: The duration of the current sequence in SECONDS.
 206           *            See \ref TRAFFIC_DURATION_t to know the duration of each 
 207           *            color sequence.
 208           * @note This function is called by the functions:
 209           *          - \ref TRAFFIC_RedSequence
 210           *          - \ref TRAFFIC_RedAmberSequence
 211           *          - \ref TRAFFIC_GreenSequence
 212           *          - \ref TRAFFIC_AmberSequence
 213           * @return ERROR_t: Error status. Check the options in the global enum \ref ERROR_t.
 214           **********************************************************************/
 215          static ERROR_t TRAFFIC_GenericSequence(const STATE_t redState, const STATE_t amberState, const STATE_t gre
             -enState, TRAFFIC_SEQUENCE_DURATION_t duration) {
 216   1          ERROR_t error = ERROR_NO;
 217   1          u8 tickTime = 0;
 218   1      
 219   1          /*!< Update the time counter */
 220   1          if(++timeInState >= duration) {
 221   2              timeInState = 0;            /*!< Reset the time counter */
 222   2              switch(colorSequence) {
 223   3                  case RED:
 224   3                      colorSequence = RED_AMBER;
 225   3                      redPin   = HIGH;
 226   3                      amberPin = HIGH;
 227   3                      greenPin = LOW;
 228   3                      break;
 229   3                  case RED_AMBER:
 230   3                      colorSequence = GREEN;
 231   3                      redPin   = LOW;
 232   3                      amberPin = LOW;
 233   3                      greenPin = HIGH;
 234   3                      break;
 235   3                  case GREEN:
 236   3                      colorSequence = AMBER;
 237   3                      redPin   = LOW;
 238   3                      amberPin = HIGH;
C51 COMPILER V9.60.0.0   TRAFFIC                                                           04/05/2022 01:44:54 PAGE 5   

 239   3                      greenPin = LOW;
 240   3                      break;
 241   3                  case AMBER:
 242   3                      colorSequence = RED;
 243   3                      redPin   = HIGH;
 244   3                      amberPin = LOW;
 245   3                      greenPin = LOW;
 246   3                      break;
 247   3                  default:
 248   3                      error |= ERROR_ILLEGAL_PARAM;
 249   3                      break;
 250   3              }
 251   2          } else {
 252   2              redPin   = redState;
 253   2              amberPin = amberState;
 254   2              greenPin = greenState;
 255   2          }
 256   1      
 257   1          return error;
 258   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    274    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
